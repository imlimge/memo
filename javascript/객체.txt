static mathod 
정적메소드

Object
전역객체


********************************************************
- Object.assign(대상객체, 출처객체)
********************************************************
출처객체에서 대상객체로 소스를 복사하여 넣음. 대상객체를 반환
출처객체는 계속 추가 가능

const a = {
  name: 'lim',
  color: 'yellow'
}
const b = {
  name: 'lim',
  food: 'chicken'  
}
const c = Object.assign(a,b)
// c >> {name:'lim', color:'yellow', food:'chicken'}

a === c
// true
>>  참조형 데이터({},[],function)
a는 메모리 주소만 가지고 있어서 a와 c는 같은 주소를 향해있어서
true값이 나옴

----------------------------------------------------------------
- 기존 객체에 추가하는것이 아닌 새로운 객체로 반환하고자 할 때

const c = Object.assign({},a,b)
이렇게 되면 a,b 출처 객체가 되고 원본 객체는 건드리지 않으며
계속 내용 추가 가능
a === c
// false

const c = Object.assign({},a)
a === c
// false
----------------------------------------------------------------

const q = { e : 123 }
const w = { e : 123 }
q === w 
// false
>> q와w는 생긴건 같지만 다른 객체다
다른 메모리 주소를 가지고 있어서 flase 나옴

----------------------------------------------------------------



********************************************************
- Object.keys(객체)
********************************************************
객체 데이터의 키값들을 배열로 반환함

const user = {
  name:'lim',
  color: 'yellow',
  food: 'chicken' 
}

const a = Object.keys(user)
// a >> ['name', 'color', 'food']

// user['name'] >> lim

- 값만 배열로 반환하는 법
const val = a.map(x=> user[x])
// val >> ['lim', 'yellow','chicken']