
- 내용 넣기
요소.textContent = `값`

********************************************************

- 요소만들기
const 이름 = document.querySelector('li')

********************************************************

- arguments 객체
arguments : arguments를 객체로 사용 가능함. 
console에 함수를 사용할 때 쓴 인수가 배열로 생성

ex)
function sum(x, y){
console.log(arguments)
return arguments[0] + arguments[1]
}
console.log(sum(1,3))
>> Arguments(2) [1, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]



********************************************************

- 호이스팅 (Hoisting)
함수 선언부가 유효범위 최상단으로 끌어올려지는 현상

********************************************************

- 프로토타입 (prototype)
// 프로토타입을 사용한 경우
function Aaa() {}

// Aaa 객체의 프로토타입에 함수 추가
Aaa.prototype.함수이름 = function() {
    // 함수의 내용
};

// Aaa 객체의 인스턴스 생성
const aa = new Aaa();


// 프로토타입을 사용하지 않은 경우
function Aaa() {
    // 인스턴스마다 고유한 함수 생성 (내부에 함수 셋팅)
    this.함수이름 = function() {
        // 함수의 내용
    };
}

// Aaa 객체의 인스턴스 생성
const aa = new Aaa();

.prototype을 쓰면 생성자 함수에만 함수가 추가되어
인스턴스에서는 함수가 생성되지 않고 모든 인스턴스에서 공유되어 사용가능
.prototype없이 생성자 함수 내부에 추가하면
각 인스턴스에 고유한 함수가 발생하고
인스턴스 각각 함수를 가지게 되어 메모리 증가로 이어짐


********************************************************

- this
일반 함수는 호출 위치에 따라 this 정의
화살표 함수는 자신이 선언된 함수가 정의된 위치가 아니라 외부의 전역 컨텍스트 에서 this 정의

const aa = {
  name: 'aa',
  normal: function(){ 
    console.log(this.name)  // 콘솔 aa
  },
  arrow: ()=>{
    console.log(this.name) // 콘솔 undefined
  }
}

aa.normal()  >>  여기서 호출되어서 aa 출력 됨
aa.arrow() >> aa 객체가 아닌 window를 가리킴 name찾을 수 없음



const timer = {
  aa: 'aaa',
  timeout: function(){

    setTimeout(()=>{
      console.log(this.aa)
    },2000),   >>만들어진 함수 범위 내 즉 timeout까지 범위라서 timer 객체를 가리키게 됨 aaa 출력

    setTimeout(function(){
      console.log(this.aa)
    },2000),   >> 호출 위치에 따라 setTimeout 내에서 호출되어 전역 객체 window를 가리켜 undefined됨

  }

}
timer.timeout()




********************************************************

- 구조 분해 할당 (Desrtucturing assignment)
- 비구조화 할당

const user = {
  name:'lim',
  color: 'yellow',
  food: 'chicken' 
}

const {name, color, drink} = user
// `${name}는 ${color}색의 ${user.food}를 먹는다`
// drink 는 undefined


키값 이름을 변경 가능 name->lim/ 기본값 지정 가능 drink="beer"
const {name: lim, color, drink ='beer'} = user
// `${lim}는 ${color}색의 ${user.food}를 먹는다`
// drink 는 beer

다만 user에 drink값이 생기면 user에 있는 값 출력


** 배열도 구조분해 가능
const list = ['lim','yellow','chicken']
const [a,b,c,d] = list
// a,b,c,d >> (lim yellow chicken undefined)


배열은 키값이 아닌 인덱스 순서로 반환되기 때문에 순서대로 값이 꺼내짐
const [, ,b] = list  
// b >> chicken
>> 빈공간 순서대로 건너뛴다 여기서 b는 세번째 순서인 chicken이 반환


********************************************************

전개 연산자 (Spread)


const list = ['lim','yellow','chicken']
// list >> ['lim','yellow','chicken']
// ...list >> lim yellow chicken 


function toO(a,b,c){
  return{
    aa: a,
    bb: b,
    cc: c
  }
}

// toO(...list) >> {aa:'lim',bb:'yellow',cc:'chicken'}
> toO('lim', 'yellow', 'chicken') 와 동일함


function toO(a,b,c){
  return{
    [a]: a,
    [b]: b,
    [c]: c,
  }
}
// toO(...list) >> {lim: 'lim', yellow: 'yellow', chicken: 'chicken'}
> 키에 할당하고 싶으면 정적이아닌 동적으로 지정함


const key = 'name';
const value = 'lim';

const obj = {
  [key]: value
};
// obj >> {name: 'lim'}

const obj = {
  key: value
};
// obj >> {key: 'lim'}


