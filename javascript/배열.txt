
- .find
배열.find(찾는항목 = 찾는항목과 조건)
const array = [1,3,13,5,20,40]
const found = array.find(a=> a>10)
// 콘솔 10

>> 첫번째 요소의 값을 반환 / 없으면 undefined


- .length
배열.length
>> 배열의 아이템 갯수 반환


- .concat()
원본배열.concat(새배열)
>> 두개의 배열 데이터를 병합하여 새 배열 데이터 출력
>> 원본배열이 수정되지 않고 새배열을 추가


- .forEach()
배열.forEach(function(element, index, array){
})
const aa = [a,b,c]
aa.forEach(function(ele,idx,arr){
  console.log(ele,idx,arr)
})
// a 0 aa배열 / b 1 aa배열 / c 2 aa배열
>> 배열의 갯수만큼 콜백함수 반복 실행, array는 잘 안쓰임



-.map()
배열.map(function(element, index){
  return 반환값
})

forEach와의 비교----
const aa = [a,b,c]

const a = aa.forEach(function(ele,idx){
  console.log(`${ele}-${idx}`)
})
console.log(a)
// undefined 출력

const b = aa.forEach(function(ele,idx){
  return `${ele}-${idx}`
})
console.log(b)
// ["a-0","b-1","c-2"] 출력

**map은 return이 있어서 콜백함수 밖으로 반환 한다
b라는 변수에 할당이 가능하여 새로운 배열 출력
