- 정규식, Regular Expression
역할 : 문자 검색, 문자 대체, 문자 추출

테스트사이트:
https://regexr.com/



[ 정규식 생성 ]
- 생성자 함수 방식
new RegExp('표현','옵션')
new RegExp('[a-z]','gi')

- 리터럴(literal) 방식
/표현/옵션
/[a-x]/gi


ex)
const str = `hello
worlbeerdavav
thecosf@fsdfsd.ckm
avavdvdvdvbeerdds.
https://fastcampus.co.kr/courses/203720/clips/
010-efeeeef-3333
The quick and The beer and chicken.
http://fastcampus.co.kr/
sdvsbeerdvdsvds
`

// const regexp = new RegExp('the','gi')
const regexp = /the/gi
console.log(str.match(regexp))




[ 메소드 ] 
test / 정규식.test(문자열) / 일치 여부(Boolean) 반환
match / 문자열.match(정규식) / 일치하는 문자의 배열 반환
replace / 문자열.replace(정규식) /  일치하는 문자를 대체



[ 플래그(옵션) ]
g : 모든 문자 일치 (global)
i : 영어 대소문자를 구분하지 않고 일치 (ignore case)
m : 여러 줄 일치(multi line)



[ 패턴(표현) ]
^ab : 줄(Line) 시작이 있는 ab와 일치
ab$ : 줄(Line) 끝에 있는 ab와 일치
. : 임의의 한 문자와 일치 
a|b : a 또는 b와 일치
ab? : (a와 상관없이)b가 없거나 b와 일치

ex)
str.match(/./g)
>> 모든 글자를 배열로 반환함
str.match(/h..p/g) 
>> h로 시작하고 p로 끝나는 단어를 찾아준다
str.match(/https?/g)
>> http 또는 https 출력


{3} : 3개 연속 일치
{3,} : 3개 이상 연속 일치
{3,5} : 3개 이상 5개 이하 (3~5) 연속 일치

ex)
str.match(/e{2}/)
>> ee 를 찾아줌
str.match(/e{2,}/g)
>> ee, eee, eeee 이런것들을 찾아줌
str.match(/e{2,3}/g)
>> ee ~ eee 까지 출력


[abc] : a 또는 b 또는 c
[a-z] : a부터 z 사이의 문자 구간에 일치 (영어 소문자)
[A-Z] : A부터 Z 사이의 문자 구간에 일치 (영어 대문자)
[0-9] : 0부터 9 사이의 문자 구간에 일치 (숫자)
[가-힣] : 가부터 힣 사이의 문자 구간에 일치 (한글)

ex)
tr.match(/[beer]/g)
>> b,e,r 모든 단어 출력


\w : 63개 문자(Word, 대소문자 52개 + 숫자10개 + _ )에 일치
\d : 숫자(Digit)에 일치
\s : 공백(Space, Tab, \n(줄바꿈) 등)에 일치

\A : 줄과 상관없이 문자열의 처음과 매치 
\Z : 문자열의 끝과 매치
\b : 63개 문자에 일치하지 않는 문자 경계(boundary), 단어와 단어사이 경계 판단 (boundary). 단어 구분자 화이트스페이스에 의해 구분됨
\B : 화이트 스페이스로 구분된 단어가 아닌경우에 매치


(?=) : 앞쪽 일치(Lookahead)
(?<=) : 뒤쪽 일치(Lookbehind)

ex)
str.match(/.{1,}(?=@)/g)
>> @ 앞의 1개 이상의 단어를 찾는다. 이메일 아이디 찾기 참고
str.match(/(?<=@).{1,}/g)
>> @ 뒤의 1개 이상의 단어를 찾는다. 이메일 주소 찾기 참고